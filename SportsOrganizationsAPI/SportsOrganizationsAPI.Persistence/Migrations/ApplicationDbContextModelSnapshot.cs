// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsOrganizationsAPI.Persistence;

#nullable disable

namespace SportsOrganizationsAPI.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.Award", b =>
                {
                    b.Property<Guid>("AwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AwardId");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.ParticipationSportEvent", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportEventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AwardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportEventRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PersonId", "SportEventId");

                    b.HasIndex("AwardId");

                    b.HasIndex("SportEventId");

                    b.HasIndex("SportEventRoleId");

                    b.HasIndex("SportId");

                    b.ToTable("ParticipationSportEvents");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.Sport", b =>
                {
                    b.Property<Guid>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportId");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportEvent", b =>
                {
                    b.Property<Guid>("SportEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SportsFacilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SportEventId");

                    b.HasIndex("SportId");

                    b.HasIndex("SportsFacilityId");

                    b.ToTable("SportEvents");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportEventRole", b =>
                {
                    b.Property<Guid>("SportEventRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportEventRoleId");

                    b.ToTable("SportEventRoles");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportsFacility", b =>
                {
                    b.Property<Guid>("SportsFacilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("CapacityPerson")
                        .HasColumnType("int");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SportsFacilityTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SportsFacilityId");

                    b.HasIndex("CityId");

                    b.HasIndex("SportsFacilityTypeId");

                    b.ToTable("SportsFacilities");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportsFacilityType", b =>
                {
                    b.Property<Guid>("SportsFacilityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SportsFacilityTypeId");

                    b.ToTable("SportsFacilityTypes");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.ParticipationSportEvent", b =>
                {
                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.Award", "Award")
                        .WithMany()
                        .HasForeignKey("AwardId");

                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.SportEvent", "SportEvent")
                        .WithMany("ParticipationSportEvents")
                        .HasForeignKey("SportEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.SportEventRole", "SportEventRole")
                        .WithMany()
                        .HasForeignKey("SportEventRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.Sport", null)
                        .WithMany("ParticipationSportEvents")
                        .HasForeignKey("SportId");

                    b.Navigation("Award");

                    b.Navigation("Person");

                    b.Navigation("SportEvent");

                    b.Navigation("SportEventRole");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportEvent", b =>
                {
                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId");

                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.SportsFacility", "SportsFacility")
                        .WithMany("SportEvents")
                        .HasForeignKey("SportsFacilityId");

                    b.Navigation("Sport");

                    b.Navigation("SportsFacility");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportsFacility", b =>
                {
                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.City", "City")
                        .WithMany("SportsFacilities")
                        .HasForeignKey("CityId");

                    b.HasOne("SportsOrganizationsAPI.Domain.Entities.SportsFacilityType", "SportsFacilityType")
                        .WithMany()
                        .HasForeignKey("SportsFacilityTypeId");

                    b.Navigation("City");

                    b.Navigation("SportsFacilityType");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.City", b =>
                {
                    b.Navigation("SportsFacilities");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.Sport", b =>
                {
                    b.Navigation("ParticipationSportEvents");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportEvent", b =>
                {
                    b.Navigation("ParticipationSportEvents");
                });

            modelBuilder.Entity("SportsOrganizationsAPI.Domain.Entities.SportsFacility", b =>
                {
                    b.Navigation("SportEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
